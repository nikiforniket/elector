# Generated by Django 4.0.4 on 2022-04-24 15:43

import django.core.validators
from django.db import migrations, models
import django.utils.timezone
import re
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='ElectoralUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('username', models.CharField(blank=True, help_text='Required. 30 characters or fewer. Letters, numbers and /./-/_characters', max_length=32, null=True, unique=True, validators=[django.core.validators.RegexValidator(re.compile('^[\\w.-]+$'), 'Enter a valid username.', 'invalid')], verbose_name='user name')),
                ('email', models.EmailField(max_length=255, unique=True, verbose_name='email')),
                ('role', models.CharField(choices=[('AD', 'Admin'), ('WK', 'Worker'), ('MN', 'Manager'), ('ST', 'Support'), ('IN', 'Internal')], default='IN', max_length=10)),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates whether the user can have accessto all permissions on every model.', verbose_name='superuser status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active.Unselect this instead of deleting accounts.', verbose_name='active status')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('full_name', models.CharField(blank=True, max_length=256, verbose_name='full name')),
                ('bio', models.TextField(blank=True, default='', verbose_name='biography')),
                ('photo', models.ImageField(blank=True, null=True, upload_to='profile-pictures')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Electoral User',
                'verbose_name_plural': 'Electoral Users',
                'ordering': ['full_name', '-date_joined'],
            },
        ),
        migrations.CreateModel(
            name='AdminUser',
            fields=[
            ],
            options={
                'verbose_name': 'Admin User',
                'verbose_name_plural': 'Admin Users',
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('userauth.electoraluser',),
        ),
        migrations.CreateModel(
            name='ManagerUser',
            fields=[
            ],
            options={
                'verbose_name': 'Manager User',
                'verbose_name_plural': 'Manager Users',
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('userauth.electoraluser',),
        ),
        migrations.CreateModel(
            name='WorkerUser',
            fields=[
            ],
            options={
                'verbose_name': 'Worker User',
                'verbose_name_plural': 'Worker Users',
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('userauth.electoraluser',),
        ),
    ]
